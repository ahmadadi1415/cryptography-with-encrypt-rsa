import Head from "next/head";
import { prisma } from "../../lib/prisma";
import axios from 'axios'
import EncryptRSA from "encrypt-rsa"
import { useEffect, useState } from "react";

interface Props {
    messages: Message[],
}

interface Message {
    id: string,
    message: string,
    realMessage: string
}

export default function Messages({ messages }: Props) {

    const [rerender, setRerender] = useState(false)
    const [submitting, setSubmitting] = useState(false)
    const [msgIndex, setMsgIndex] = useState<number>(-1)

    async function decrypt(id: string) {
        const index = messages.findIndex(message => message.id === id)
        setMsgIndex(index)
        // console.log(messages[index].realMessage)
        if (messages[index].realMessage === undefined) {
            setSubmitting(true)
            const response = await axios.get(`/api/message/${id}`)
            messages[index].realMessage = response.data.realMessage
            // console.log("S")
            setSubmitting(false)
        }

        alert(`Real message: \n${messages[index].realMessage}`)
        setMsgIndex(-1)
    }

    useEffect(() => {

    }, [submitting, msgIndex])


    return <>
        <Head>
            <title>RSA Encryption</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/favicon.ico" />
        </Head>

        <main className="bg-gradient-to-r from-gray-800 to-orange-600 min-h-screen">
            <div className="container">
                <div className="pt-20">
                    <h1 className="text-5xl text-center">ENCRYPT MESSAGE WITH RSA ENCRYPTION</h1>
                    <h5 className='text-center mx-3'>Created by <b>Ahmad Adi Prasetyo</b></h5>
                </div>
                <div className="pt-6 mx-32">
                    <p className="text-lg text-left pt-5 font-sans text-gray-50">What is it?</p>
                </div>
                <div className="py-3 mx-20 mb-4">
                    <div className='text-base text-left font-sans text-gray-50'>
                        RSA encryption is a public-key cryptosystem that is widely used for secure data transmission. It is also one of the oldest. The acronym "RSA" comes from the surnames of Ron Rivest, Adi Shamir and Leonard Adleman, who publicly described the algorithm in 1977. RSA encryption works by using a pair of keys, a public key and a private key. The public key can be shared with anyone, while the private key must be kept secret. To encrypt a message, the sender uses the recipient's public key. To decrypt the message, the recipient uses their private key. RSA encryption is a very secure algorithm, and it is used in a wide variety of applications, including secure email, online banking, and digital signatures.
                    </div>
                </div>
                {/* <div className="text-center py-10 lg:px-52 md:px-7 sm:px-5">
                    <table className="w-full border-separate border-spacing-y-2">
                        <thead className="bg-gray-800">
                            <tr className="font-semibold text-lg text-gray-100 ">
                                <th className="w-3/12 py-4 rounded-s-full shadow-xl">ID</th>
                                <th className="w-5/12 py-4 shadow-xl">Encrypted Message</th>
                                <th scope="col" className="w-4/12 py-4 rounded-e-full shadow-xl">Real Message</th>
                            </tr>
                        </thead>

                        <tbody className="overflow-y-auto">
                            {
                                messages.map((messageData, index) => (

                                    <tr key={index} className="text-gray-300 bg-orange-950 bg-opacity-20 hover:bg-opacity-40">
                                        <td className="w-3/12 font-mono rounded-s-full">{messageData.id}</td>
                                        <td className="w-5/12 max-w-prose">
                                            <div className="w-full overflow-y-auto font-mono overflow-scroll">{messageData.message}</div>
                                        </td>
                                        <td className="w-4/12 max-w-prose px-5 rounded-e-full py-1">
                                            <button className="focus:bg-black  hover:bg-gray-900 bg-opacity-10 py-2 px-5 shadow-lg rounded-full text-center"
                                                type="button"
                                                disabled={submitting}
                                                onClick={() => decrypt(messageData.id)}>
                                                {(messageData.realMessage === undefined) ?
                                                    ((submitting && msgIndex === index) ? "Decrypting..." : "Decrypt!")
                                                    : "Show"}
                                            </button>
                                        </td>
                                    </tr>
                                ))
                            }

                        </tbody>
                    </table>
                </div> */}
                {/* <div className="flex justify-center items-center container px-10">
                    <div className="flex flex-col">
                        <div className="overflow-x-auto">
                            <div className="p-1.5 min-w-fit inline-block align-middle">
                                <div className="overflow-hidden">
                                    <table className="min-w-full border-separate border-spacing-y-1.5">
                                        <thead>
                                            <tr>
                                                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase">ID</th>
                                                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase">Encrypted message</th>
                                                <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-300 uppercase">Real message</th>
                                            </tr>
                                        </thead>
                                        <tbody className="">
                                            {
                                                messages.map((messageData, index) => (

                                                    <tr key={index} className="text-gray-300 bg-orange-950 bg-opacity-20 hover:bg-opacity-40">
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-800 dark:text-gray-200 overflow-auto rounded-s-full font-mono">{messageData.id}</td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-800 dark:text-gray-200 sm:max-w-prose md:max-w-xs lg:max-w-md xl:max-w-2xl rounded-none">
                                                            <div className="w-10 sm:w-20 md:w-full overflow-y-auto font-mono overflow-scroll">{messageData.message}</div>
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-center text-sm font-medium rounded-e-full">
                                                            <button className="focus:bg-black hover:bg-gray-900 hover:text-white bg-opacity-10 py-2 px-5 shadow-lg rounded-full text-center w-32"
                                                                type="button"
                                                                disabled={submitting}
                                                                onClick={() => decrypt(messageData.id)}>
                                                                {(messageData.realMessage === undefined) ?
                                                                    ((submitting && msgIndex === index) ? "Decrypting..." : "Decrypt!")
                                                                    : "Show"}
                                                            </button>                                                    </td>
                                                    </tr>
                                                ))
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div> */}
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 container px-20">
                    {
                        messages.map((messageData, index) => (

                            <div key={index} className="col-auto rounded-md bg-black bg-opacity-40 p-5 shadow-md">
                                <div className="mb-4">
                                    <label className="block mb-1 text-sm text-gray-900 dark:text-white font-semibold">ID</label>
                                    <textarea id="message"
                                        className="block p-2.5 w-full text-sm rounded-lg border-none bg-white bg-opacity-10 text-gray-100 font-mono"
                                        value={messageData.id}
                                        readOnly
                                        rows={1}
                                    />
                                </div>
                                <div>
                                    <label className="block mb-4 text-xs text-gray-900 dark:text-white font-semibold">ENCRYPTED MESSAGE</label>
                                    <textarea id="message"
                                        className="block p-2.5 w-full text-sm rounded-lg border-none bg-white bg-opacity-10 text-gray-100 font-mono"
                                        value={messageData.message}
                                        readOnly
                                        rows={6}
                                    />
                                </div>
                                <div className="mt-4 text-right">
                                    <button className=" hover:bg-gray-900 hover:text-white bg-white bg-opacity-10 py-2 px-5 shadow-lg rounded-full text-center w-32"
                                        type="button"
                                        disabled={submitting}
                                        onClick={() => decrypt(messageData.id)}>
                                        {(messageData.realMessage === undefined) ?
                                            ((submitting && msgIndex === index) ? "Decrypting..." : "Decrypt!")
                                            : "Show"}
                                    </button>
                                </div>
                            </div>
                        ))
                    }

                </div>
            </div>
        </main>
    </>

}

export async function getServerSideProps() {
    const messages = await prisma.message.findMany()

    return {
        props: {
            messages
        }
    }
}